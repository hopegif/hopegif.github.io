[{"title":"复习Express","date":"2017-02-08T01:16:43.000Z","path":"2017/02/08/复习Express/","text":"–save和–save-dev 前者是依赖保存到package.json文件中的dependencies选项中 后者，是保存到devDependencies选项中 两者都是通过执行 npm install 来安装依赖包 后者 在上线运行的时候 开发依赖项就不在需要了 就可以通过 npm install –production 命令仅仅安装dependencies babel 转码器 babel-cli：命令行转码 babel-register：实时转码，实用开发环境 babel-core：调用babel的api进行转码 babel-cli： 一种方式就是全局安装：npm install -g babel-cli 只要全局安装了 就会在命令行多出一个命令：babel 通过 npm root -g查看全局包的安装目录 这里如果使用全局安装了babel-cli进行转码是没有问题的，如果一旦项目给了别人，别人不知道你使用了这个转码工具，解决方式就是将 babel-cli安装到本地项目中（npm install –save-dev babel-cli） 这种第三方命令行工具如果安装到本地项目，会在node_modules中生成一个目录bin，然后第三方命令工具会将可执行文件放到该目录中 如果使用 则通过packagejson文件中的scripts字段来配置使用(npm run build) babel-register:(适合开发阶段实时编码转换) 第一：安装babel-register1npm install --save-dev babel-register 第二：添加一个傀儡文件（main.js） 123require('babel-register')require('你的核心功能代码入口文件')//开发阶段的（'./src/app'） 第三:使用node执行main.js 而不是你的入口文件 生产环境：把node_modules删掉 然后安装npm install –production Express 基于Node.js平台，快速，开发web框架hello world 12345678910111213141516171819202122232425262728293031323334353637383940414243444546//app.js 需要1：用户访问/响应hello worldconst express=require('express');//1.调用express（）方法 得到一个app实例接口对象const app=express()//这个表示一个中间件//任何请求进来都会执行对应的处理函数//改代码内部如果不发送响应或者不做进一步处理代码会一直停在这里app.use(function(req,res,next)&#123; //cosole.log('111') //res.end('hello express') const urlPath=req.path 不包括查询字符串 // if(req.path.startsWith('public/')&#123; const filePath=`.$&#123;urlPath&#125;`//这里加.的原因是 //因为如果读文件是以/开头会去当前文件的根目录 fs.readFile(filePath,(err,data)=&gt;&#123; if(err)&#123; return res.end('404 not found') &#125; res.end(data) &#125;) &#125;else&#123; next()//如果请求路径不是以/public/开头的，则调用next函数（不确定） //这里调用next的目的就是告诉express继续往后执行:中间件 //具体执行哪个中间件，取决于对应的中间件的类型 &#125; next() &#125;)//2.通过app设置对应的路径 对应的请求处理函数//回调处理函数中://req 请求对象：用来获取当前客户端的请求数据或者请求报文信息//例如 req.query用来获取查询字符串数据 req.method用来当前请求方法//res响应对象:用来向当前请求客户端发送消息数据// 例如 res.write('响应数据') res.end（）结束响应app.get('/',function(req,res)&#123; res.write(\"hello\") res.end() //end用来结束响应的同时发送响应数据 &#125;) //3.开启监听 启动服务器 app.listen(3000,function()&#123; console.log(\"running\") &#125;) 基本路由 根据不同的请求路径分发到具体的请求处理函数 处理静态资源模板引擎中间件中间件：用来处理http请求的一个具体的环节（可能要执行某个具体的处理函数）中间件一般都是通过修改req或者res对象来为后续的处理提供便利的使用中间件分类：use(function(req,res,next){})不关心请求方法和请求路径 没有具体路由规则，任何请求都能进来use（’请求路径’,function（req，res，next）{}）不关心请求方法，只关心请求路径的中间件get(‘请求路径’，function(req,res,next){}) 具体路由规则中间件post(“请求路径”，function(req,res,next){})中间件的作用： 1.处理静态资源 1234567891011121314151617181920app.use('/public',express.static('开放目录的路径'))app.use((req,res,next)=&gt;&#123; console.log(111); next()&#125;)app.use((req,res,next)=&gt;&#123; console.log(222); next();&#125;)//关系请求路径app.use('/a',(req,res,next)=&gt;&#123; console.log('use/a');&#125;)app.use((req,res,next)=&gt;&#123; console.log(333);&#125;)","link":"","categories":[],"tags":[]},{"title":"ECMAScript入门","date":"2017-02-07T04:28:48.000Z","path":"2017/02/07/ECMAScript入门/","text":"知识点Ecmascript 6 ECMAScript 6.0（以下简称ES6）是JavaScript语言的下一代标准，已经在2015年6月正式发布了。 Ecmascript 是 JavaScript 语言的标注规范 let和const let类似于var,也是用来定义变量的 通过let定义的变量是块级作用域，只在当前代码块有效 const也类似于var，用来定义常量 通过const定义的常量，定义的时候必须初始化 let和const都没有作用域提升 let和const在一个块作用域中都不能重复定义 解构赋值数据解构： 1234567891011121314151617let [a,b,c]=[123,456,788]console.log(a,b,c) //123 456 789//let的用处&lt;ul&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;li&gt;3&lt;/li&gt; &lt;li&gt;4&lt;/li&gt; &lt;li&gt;5&lt;/li&gt; &lt;/ul&gt; var lis = document.querySelectorAll('li') for(let i = 0; i &lt; lis.length; i++) &#123; lis[i].onclick = function () &#123; alert(i) &#125; &#125; console.log(i) 对象解构： 12let &#123;name,age&#125;=&#123;name:'jack',age:18&#125;console.log(name,age)//jack 18 函数参数解构:1234function f(p1,&#123;p2='aa',p3='bb'&#125;)&#123; console.log(p1,p2,p3)&#125;f('p1',&#123;p2:'p2'&#125;) //p1 p2 bb 字符串结构12let [a,b,c,d,e]='hello'console.log(a,b,c,d,e) //h e l l o //模板字符串：凡是以后需要字符串拼接的地方都使用模板字符串12let name='jack',time='today'`hell $(name),how are you $(time)` 数组的扩展 Array.from()将它转为真正的数组 Array.of()将一组值，转为数组 find()用于找出第一个符合条件的数组成员 123[1,5,10,15].find(function(value,index,arr)&#123; return value&gt;9; &#125;) 4.findIndex方法返回第一个符合条件的数组成员的位置 箭头函数12345678910111213141516let f=function(v)&#123; return v&#125;let f=v=&gt;v+'a'console.log(f(1))//如果有多个参数则必须加括号let add=(x,y)=&gt;x+yconsole.log(add(10,20))//如果方法有多条执行语法，则必须加&#123;&#125;let add=(x,y)=&gt;&#123; console.log(x,y) return x+y&#125;//箭头函数最好用在匿名函数的地方let arr=[1,2,3]arr.forEach(n=&gt;console.log(n))","link":"","categories":[],"tags":[]},{"title":"svn","date":"2017-02-06T02:00:04.000Z","path":"2017/02/06/svn/","text":"SVN知识点","link":"","categories":[],"tags":[]},{"title":"Git入门指南","date":"2017-02-05T10:54:43.000Z","path":"2017/02/05/Git入门指南/","text":"知识点 Git Github 项目阶段 Git-bash文件操作相关命令 touch 创建文件 cat 查看文件 less 查看大文本文件 vi visual interface Esc 退出到命令模式 i 进入插入模式 :q 退出vi :w 保存编辑 :wq 保存并退出 Git基本命令 git init 创建版本管理仓库 git status 查看仓库状态 git add 文件名 添加改动到暂存区 git commit -m ‘创建日志’ 提交到本地仓库 历史记录 git log 查看提交日志 添加/删除文件","link":"","categories":[],"tags":[]}]